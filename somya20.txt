class TaxiPassengers
    {
        static int maxPassengers = 0;
        static bool vistedDestination = false;
        public static int[,] directionsArrayToStation = new int[,] { { 0, 1 }, { 1, 0 } };
        public static int[,] directionsArrayToOrigin = new int[,] { { 0, -1 }, { -1, 0 } };
        public static int GetPassengers(int[][] matrix)
        {
            if (matrix == null || matrix.Length == 0)
                return 0;
            int rows = matrix.Length;
            int columns = matrix[0].Length;
            int max = DFS(0,0,rows,columns,matrix);          
            return max;
        }

        private static int DFS(int row, int col, int rows, int columns, int[][] matrix)
        {                  
            if (row == rows - 1 && col == columns - 1)
                vistedDestination = true;
            if (!vistedDestination)
            {
                for (int i = 0; i < 2; i++)
                {
                    int r = row + directionsArrayToStation[i, 0];
                    int c = col + directionsArrayToStation[i, 1];
                    if (r < 0 || c < 0 || r > rows - 1 || c > columns - 1 || matrix[r][c] == -1)
                        continue;
                    if (r == 0 && c == 0)
                        break;
                    int flag = (matrix[r][c] == 1) ? 1 : 0;
                    matrix[r][c] = 2;
                    maxPassengers = flag + DFS(r, c, rows, columns, matrix);
                }
            }
            else if(vistedDestination)
            {
                for (int i = 0; i < 2; i++)
                {
                    int r = row + directionsArrayToOrigin[i, 0];
                    int c = col + directionsArrayToOrigin[i, 1];
                    if (r < 0 || c < 0 || r > rows - 1 || c > columns - 1 || matrix[r][c] == -1)
                        continue;
                    if (r == 0 && c == 0)
                        break;
                    
                    int flag = (matrix[r][c] == 1) ? 1 : 0;
                    if((matrix[r][c] == 1)) matrix[r][c] = 2;
                    maxPassengers = flag + DFS(r, c, rows, columns, matrix);
                }
            }
            return maxPassengers;
        }

        public static void Main(string[] args)
        {
            var res = GetPassengers(new int[][] {new int[] {0,1,-1},
            new int[] { 1,0,-1 }, new int[] {1,1,1 } });
            var res = GetPassengers(new int[][] {new int[] {0,0,0,1},
            new int[] { 1,0,0,0 }, new int[] {0,0,0,0 }, new int[] {0,0,0,0 } });
            var res = GetPassengers(new int[][] {new int[] {0,1},
            new int[] { -1,0}});
            Console.ReadLine();
        }

    }